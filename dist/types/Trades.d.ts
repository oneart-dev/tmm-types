import { ControllersApiSuccessResponse, ControllersCategoriesListResponse, ControllersOrdersListResponse, ControllersPublicTradeGroupResponse, ControllersPublicTradeResponse, ControllersShortUrlResponse, ControllersTagsResponse, ControllersTradeChartDrawingsResponse, DtoCategoryListForm, DtoGlobalChartDataForm, DtoTagForm, DtoTagsSortForm, DtoTradeChartDataForm, DtoTradeChartForm, DtoTradeDrawingForm, DtoTradeGroupShortLink, DtoTradeUpdateDescForm, DtoTradeUpdateTagsBulkForm, DtoTradeUpdateTagsForm, DtoTradesCategoryForm, DtoTradesMergeForm, ServicesTradeChartResponse, ServicesTradesListPagination } from "./data-contracts";
import { HttpClient, RequestParams } from "./http-client";
export declare class Trades<SecurityDataType = unknown> extends HttpClient<SecurityDataType> {
    tradesList: (query?: {
        page?: number;
        sortBy?: string;
        sortDesc?: boolean;
        itemsPerPage?: number;
        id?: number;
        ids?: number[];
        api_key_id?: number[];
        tags?: number[];
        trade_time?: string;
        durationType?: "today" | "yesterday" | "past1w" | "1w" | "1m" | "7d" | "30d" | "90d";
        openBetween?: string;
        closeBetween?: string;
        percentBetween?: string;
        profitBetween?: string;
        durationBetween?: string;
        leverageBetween?: string;
        side?: "SHORT" | "LONG";
        user_id?: string;
        category_id?: number;
        volumeFrom?: number;
        volumeTo?: number;
        daysOfWeek?: number[];
        symbol?: string[];
        extraInfo?: "conclusion:empty" | "conclusion:not-empty" | "desc:empty" | "desc:not-empty" | "mentor_note:not-empty" | "mentor_note:empty";
    }, params?: RequestParams) => Promise<import("axios").AxiosResponse<ServicesTradesListPagination, any>>;
    archiveAllCreate: (params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersApiSuccessResponse, any>>;
    categoriesList: (params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersCategoriesListResponse, any>>;
    categoriesCreate: (payload: DtoCategoryListForm, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersCategoriesListResponse, any>>;
    categoriesCreate2: (id: number, payload: DtoCategoryListForm, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersApiSuccessResponse, any>>;
    categoriesDelete: (id: number, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersApiSuccessResponse, any>>;
    dayOrdersList: (apiKeyId: number, date: string, symbol: string, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersOrdersListResponse, any>>;
    exportDetail: (format: string, query?: {
        page?: number;
        sortBy?: string;
        sortDesc?: boolean;
        itemsPerPage?: number;
        id?: number;
        ids?: number[];
        api_key_id?: number[];
        tags?: number[];
        trade_time?: string;
        durationType?: "today" | "yesterday" | "past1w" | "1w" | "1m" | "7d" | "30d" | "90d";
        openBetween?: string;
        closeBetween?: string;
        percentBetween?: string;
        profitBetween?: string;
        durationBetween?: string;
        leverageBetween?: string;
        side?: "SHORT" | "LONG";
        user_id?: string;
        category_id?: number;
        volumeFrom?: number;
        volumeTo?: number;
        daysOfWeek?: number[];
        symbol?: string[];
        extraInfo?: "conclusion:empty" | "conclusion:not-empty" | "desc:empty" | "desc:not-empty" | "mentor_note:not-empty" | "mentor_note:empty";
    }, params?: RequestParams) => Promise<import("axios").AxiosResponse<void, any>>;
    globalSaveChartCreate: (id: number, ticker: string, payload: DtoGlobalChartDataForm, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersApiSuccessResponse, any>>;
    mergeCreate: (payload: DtoTradesMergeForm, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersApiSuccessResponse, any>>;
    publicGroupDetail: (code: string, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersPublicTradeGroupResponse, any>>;
    publicDetail: (code: string, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersPublicTradeResponse, any>>;
    publicLoadCandlesDataCreate: (code: string, payload: DtoTradeChartForm, params?: RequestParams) => Promise<import("axios").AxiosResponse<ServicesTradeChartResponse, any>>;
    publicPreviewDetail: (code: string, params?: RequestParams) => Promise<import("axios").AxiosResponse<void, any>>;
    shortLinkGroupCreate: (payload: DtoTradeGroupShortLink, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersShortUrlResponse, any>>;
    tagsList: (params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersTagsResponse, any>>;
    tagsCreate: (payload: DtoTradeUpdateTagsBulkForm, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersApiSuccessResponse, any>>;
    tagsSortCreate: (payload: DtoTagsSortForm, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersApiSuccessResponse, any>>;
    tagsCreate2: (id: number, payload: DtoTagForm, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersApiSuccessResponse, any>>;
    tagsDelete: (id: number, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersApiSuccessResponse, any>>;
    updateCategoryCreate: (payload: DtoTradesCategoryForm, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersCategoriesListResponse, any>>;
    chartDataCreate: (id: number, payload: DtoTradeDrawingForm, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersTradeChartDrawingsResponse, any>>;
    closeCreate: (id: number, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersApiSuccessResponse, any>>;
    loadCandlesDataCreate: (id: number, payload: DtoTradeChartForm, params?: RequestParams) => Promise<import("axios").AxiosResponse<ServicesTradeChartResponse, any>>;
    ordersDetail: (id: number, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersOrdersListResponse, any>>;
    saveChartCreate: (id: number, payload: DtoTradeChartDataForm, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersApiSuccessResponse, any>>;
    shortLinkCreate: (id: number, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersShortUrlResponse, any>>;
    tagsCreate3: (id: number, payload: DtoTradeUpdateTagsForm, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersApiSuccessResponse, any>>;
    updateCreate: (id: number, payload: DtoTradeUpdateDescForm, params?: RequestParams) => Promise<import("axios").AxiosResponse<ControllersApiSuccessResponse, any>>;
}
//# sourceMappingURL=Trades.d.ts.map