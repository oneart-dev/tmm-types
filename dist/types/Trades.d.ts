import { ControllersApiErrorResponse, ControllersApiSuccessArrayServicesOrder, ControllersApiSuccessArrayServicesTag, ControllersApiSuccessNoData, ControllersApiSuccessResponse, ControllersApiSuccessServicesTag, ControllersApiSuccessString, ControllersApiWarningResponse, ControllersCategoriesListResponse, ControllersOrdersListResponse, ControllersPublicTradeGroupResponse, ControllersPublicTradeResponse, ControllersTagsResponse, ControllersUnauthorizedResponse, DtoCategoryListForm, DtoGlobalChartDataForm, DtoTagForm, DtoTagsSortForm, DtoTradeChartDataForm, DtoTradeChartForm, DtoTradeDrawingForm, DtoTradeGroupShortLink, DtoTradeUpdateDescForm, DtoTradeUpdateTagsBulkForm, DtoTradeUpdateTagsForm, DtoTradesCategoryForm, DtoTradesMergeForm, ServicesTradeChartResponse, ServicesTradesListPagination } from "./data-contracts";
import { HttpClient, RequestParams } from "./http-client";
export declare class Trades<SecurityDataType = unknown> extends HttpClient<SecurityDataType> {
    tradesList: (query?: {
        page?: number;
        itemsPerPage?: number;
        sortBy?: string;
        sortDesc?: boolean;
        api_key_id?: number[];
        api_key_id_params?: "not:";
        avgTrades15m6h?: string;
        avgTrades1h24h?: string;
        avgTrades1m30m?: string;
        avgTrades30m12h?: string;
        avgTrades5m2h?: string;
        avgVolume15m6h?: string;
        avgVolume1h24h?: string;
        avgVolume1m30m?: string;
        avgVolume30m12h?: string;
        avgVolume5m2h?: string;
        btcCorr1m50?: string;
        btcCorr5m20?: string;
        category?: number[];
        category_params?: "not:";
        closeBetween?: string;
        daysOfWeek?: number[];
        durationBetween?: string;
        durationType?: "today" | "yesterday" | "past1w" | "1w" | "1m" | "7d" | "30d" | "90d";
        exit_tags?: number[];
        exit_tags_params?: "not:" | "all:" | "not:all:" | "only:";
        extraInfo?: "conclusion:empty" | "conclusion:not-empty" | "desc:empty" | "desc:not-empty" | "mentor_note:not-empty" | "mentor_note:empty";
        fundingRate?: string;
        groupBy?: "minute" | "hour" | "month" | "date" | "week";
        headers?: string[];
        hours_of_day?: number[];
        hours_of_day_params?: string;
        id?: number;
        ids?: number[];
        leverageBetween?: string;
        maeBetween?: string;
        mfeBetween?: string;
        multiplier?: string;
        natr1m30?: string;
        natr5m14?: string;
        openBetween?: string;
        percentBetween?: string;
        priceRange12h?: string;
        priceRange15m?: string;
        priceRange1h?: string;
        priceRange1m?: string;
        priceRange24h?: string;
        priceRange2h?: string;
        priceRange30m?: string;
        priceRange4h?: string;
        priceRange5m?: string;
        priceRange6h?: string;
        profitBetween?: string;
        profitDepositBetween?: string;
        side?: "LONG" | "SHORT";
        state?: 0 | 1 | 2;
        symbol?: string[];
        symbol_params?: "not:";
        tags?: number[];
        tags_params?: "not:" | "all:" | "not:all:" | "only:";
        trade_time?: string;
        trades12h?: string;
        trades15m?: string;
        trades1h?: string;
        trades1m?: string;
        trades24h?: string;
        trades2h?: string;
        trades30m?: string;
        trades4h?: string;
        trades5m?: string;
        trades6h?: string;
        tradesSpike15m6h?: string;
        tradesSpike1h24h?: string;
        tradesSpike1m30m?: string;
        tradesSpike30m12h?: string;
        tradesSpike5m2h?: string;
        user_id?: number;
        volume12h?: string;
        volume15m?: string;
        volume1h?: string;
        volume1m?: string;
        volume24h?: string;
        volume2h?: string;
        volume30m?: string;
        volume4h?: string;
        volume5m?: string;
        volume6h?: string;
        volumeBetween?: string;
        volumeFrom?: number;
        volumeSpike15m6h?: string;
        volumeSpike1h24h?: string;
        volumeSpike1m30m?: string;
        volumeSpike30m12h?: string;
        volumeSpike5m2h?: string;
        volumeTo?: number;
        with_archive?: boolean;
    }, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ServicesTradesListPagination, string | ControllersApiErrorResponse | ControllersUnauthorizedResponse>>;
    archiveAllCreate: (params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessNoData, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    categoriesList: (params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersCategoriesListResponse, string | ControllersApiErrorResponse | ControllersUnauthorizedResponse>>;
    categoriesCreate: (payload: DtoCategoryListForm, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersCategoriesListResponse, string | ControllersApiErrorResponse | ControllersUnauthorizedResponse>>;
    categoriesCreate2: (id: number, payload: DtoCategoryListForm, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessResponse, string | ControllersApiErrorResponse | ControllersUnauthorizedResponse>>;
    categoriesDelete: (id: number, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessResponse, string | ControllersApiErrorResponse | ControllersUnauthorizedResponse>>;
    dayOrdersList: (query: {
        api_key_id: number;
        date: string;
        symbol: string;
    }, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersOrdersListResponse, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    exportDetail: (format: string, query?: {
        sortBy?: string;
        sortDesc?: boolean;
        api_key_id?: number[];
        api_key_id_params?: "not:";
        avgTrades15m6h?: string;
        avgTrades1h24h?: string;
        avgTrades1m30m?: string;
        avgTrades30m12h?: string;
        avgTrades5m2h?: string;
        avgVolume15m6h?: string;
        avgVolume1h24h?: string;
        avgVolume1m30m?: string;
        avgVolume30m12h?: string;
        avgVolume5m2h?: string;
        btcCorr1m50?: string;
        btcCorr5m20?: string;
        category?: number[];
        category_params?: "not:";
        closeBetween?: string;
        daysOfWeek?: number[];
        durationBetween?: string;
        durationType?: "today" | "yesterday" | "past1w" | "1w" | "1m" | "7d" | "30d" | "90d";
        exit_tags?: number[];
        exit_tags_params?: "not:" | "all:" | "not:all:" | "only:";
        extraInfo?: "conclusion:empty" | "conclusion:not-empty" | "desc:empty" | "desc:not-empty" | "mentor_note:not-empty" | "mentor_note:empty";
        fundingRate?: string;
        groupBy?: "minute" | "hour" | "month" | "date" | "week";
        headers?: string[];
        hours_of_day?: number[];
        hours_of_day_params?: string;
        id?: number;
        ids?: number[];
        leverageBetween?: string;
        maeBetween?: string;
        mfeBetween?: string;
        multiplier?: string;
        natr1m30?: string;
        natr5m14?: string;
        openBetween?: string;
        percentBetween?: string;
        priceRange12h?: string;
        priceRange15m?: string;
        priceRange1h?: string;
        priceRange1m?: string;
        priceRange24h?: string;
        priceRange2h?: string;
        priceRange30m?: string;
        priceRange4h?: string;
        priceRange5m?: string;
        priceRange6h?: string;
        profitBetween?: string;
        profitDepositBetween?: string;
        side?: "LONG" | "SHORT";
        state?: 0 | 1 | 2;
        symbol?: string[];
        symbol_params?: "not:";
        tags?: number[];
        tags_params?: "not:" | "all:" | "not:all:" | "only:";
        trade_time?: string;
        trades12h?: string;
        trades15m?: string;
        trades1h?: string;
        trades1m?: string;
        trades24h?: string;
        trades2h?: string;
        trades30m?: string;
        trades4h?: string;
        trades5m?: string;
        trades6h?: string;
        tradesSpike15m6h?: string;
        tradesSpike1h24h?: string;
        tradesSpike1m30m?: string;
        tradesSpike30m12h?: string;
        tradesSpike5m2h?: string;
        user_id?: number;
        volume12h?: string;
        volume15m?: string;
        volume1h?: string;
        volume1m?: string;
        volume24h?: string;
        volume2h?: string;
        volume30m?: string;
        volume4h?: string;
        volume5m?: string;
        volume6h?: string;
        volumeBetween?: string;
        volumeFrom?: number;
        volumeSpike15m6h?: string;
        volumeSpike1h24h?: string;
        volumeSpike1m30m?: string;
        volumeSpike30m12h?: string;
        volumeSpike5m2h?: string;
        volumeTo?: number;
        with_archive?: boolean;
    }, params?: RequestParams) => Promise<import("./http-client").HttpResponse<void, string | ControllersApiErrorResponse | ControllersUnauthorizedResponse>>;
    globalSaveChartCreate: (id: number, ticker: string, payload: DtoGlobalChartDataForm, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessNoData, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    mergeCreate: (payload: DtoTradesMergeForm, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessNoData, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    publicGroupDetail: (code: string, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersPublicTradeGroupResponse, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    publicDetail: (code: string, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersPublicTradeResponse, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    publicLoadCandlesDataCreate: (code: string, payload: DtoTradeChartForm, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ServicesTradeChartResponse, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    publicPreviewDetail: (code: string, params?: RequestParams) => Promise<import("./http-client").HttpResponse<void, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    shortLinkGroupCreate: (payload: DtoTradeGroupShortLink, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessString, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    tagsList: (params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersTagsResponse, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    tagsCreate: (payload: DtoTradeUpdateTagsBulkForm, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessNoData, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    tagsSortCreate: (payload: DtoTagsSortForm, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessResponse, string | ControllersApiErrorResponse | ControllersUnauthorizedResponse>>;
    tagsCreate2: (id: number, payload: DtoTagForm, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessServicesTag, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    tagsDelete: (id: number, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessResponse, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    updateCategoryCreate: (payload: DtoTradesCategoryForm, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersCategoriesListResponse, string | ControllersApiErrorResponse | ControllersUnauthorizedResponse>>;
    chartDataCreate: (id: number, payload: DtoTradeDrawingForm, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessString, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    closeCreate: (id: number, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessNoData, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    loadCandlesDataCreate: (id: number, payload: DtoTradeChartForm, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ServicesTradeChartResponse, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    ordersDetail: (id: number, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessArrayServicesOrder, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    saveChartCreate: (id: number, payload: DtoTradeChartDataForm, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessNoData, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    shortLinkCreate: (id: number, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessString, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    tagsCreate3: (id: number, payload: DtoTradeUpdateTagsForm, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessArrayServicesTag, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
    updateCreate: (id: number, payload: DtoTradeUpdateDescForm, params?: RequestParams) => Promise<import("./http-client").HttpResponse<ControllersApiSuccessNoData, string | ControllersApiErrorResponse | ControllersApiWarningResponse | ControllersUnauthorizedResponse>>;
}
//# sourceMappingURL=Trades.d.ts.map